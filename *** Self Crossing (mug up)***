class Solution {
public:
    bool isSelfCrossing(vector<int>& dist) {
        int n = dist.size();
        if (n < 4) return false;

        for (int i = 3; i < n; ++i) {
            // Case 1: A segment crosses a previous segment
            if (dist[i] >= dist[i - 2] && dist[i - 1] <= dist[i - 3]) return true;

            // Case 2: Fifth segment crosses the first segment
            if (i >= 4 && dist[i - 1] == dist[i - 3] && dist[i] + dist[i - 4] >= dist[i - 2]) return true;

            // Case 3: Complex cases with six segments
            if (i >= 5 && dist[i - 2] >= dist[i - 4] && dist[i - 1] <= dist[i - 3] &&
                dist[i - 1] >= dist[i - 2] - dist[i - 4] && dist[i] + dist[i - 4] >= dist[i - 2] &&
                dist[i - 1] + dist[i - 5] >= dist[i - 3]) return true;
        }
        
        return false;
    }
};
