class Solution {
public:
    int minCut(string s) {
        int n = s.size();
        vector<int> dp(n, -1);
        vector<vector<bool>> isPalindrome(n, vector<bool>(n, false));

        // Precompute palindrome substrings
        for (int i = 0; i < n; i++) {
            for (int j = i; j >= 0; j--) {
                if (s[i] == s[j] && (i - j <= 2 || isPalindrome[j + 1][i - 1])) {
                    isPalindrome[j][i] = true;
                }
            }
        }

        return solve(0, s, dp, isPalindrome) - 1; // Subtract 1 because we count cuts
    }

private:
    int solve(int start, const string& s, vector<int>& dp, const vector<vector<bool>>& isPalindrome) { // Add return type 'int'
        int n = s.size();
        if (start == n) return 0;
        if (dp[start] != -1) return dp[start];

        int minCuts = n; // Maximum possible cuts

        // Try partitioning at every possible end position
        for (int end = start; end < n; end++) {
            if (isPalindrome[start][end]) {
                int cuts = 1 + solve(end + 1, s, dp, isPalindrome);
                minCuts = min(minCuts, cuts);
            }
        }

        dp[start] = minCuts;
        return dp[start]; // Add missing semicolon
    }
};
