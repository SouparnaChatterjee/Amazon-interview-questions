#include <bits/stdc++.h> 
using namespace std;

vector<vector<int>> wallsAndGates(vector<vector<int>> &a, int m, int n) {
    if(a.empty() || m == 0 || n == 0) return a;

    vector<vector<int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    queue<pair<int, int>> q;

    // Enqueue all gates' positions
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (a[i][j] == 0) {
                q.push({i, j});
            }
        }
    }

    // BFS to update distances
    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();

        for (auto &dir : directions) {
            int nx = x + dir[0];
            int ny = y + dir[1];

            // Check if the neighboring cell is within bounds and has not been updated yet
            if (nx >= 0 && nx < m && ny >= 0 && ny < n && a[nx][ny] == INT_MAX) {
                a[nx][ny] = a[x][y] + 1;
                q.push({nx, ny});
            }
        }
    }

    return a;
}
