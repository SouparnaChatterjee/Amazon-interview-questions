class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> memo(m, vector<int>(n, -1));  // Memoization table initialized with -1
        return helper(grid, m - 1, n - 1, memo);  // Start recursion from the bottom-right corner
    }

private:
    int helper(vector<vector<int>>& grid, int i, int j, vector<vector<int>>& memo) {
        // Base case: if we are at the top-left corner, return its value
        if (i == 0 && j == 0) return grid[i][j];
        
        // If out of bounds, return INT_MIN to indicate invalid path
        if (i < 0 || j < 0) return INT_MAX;
        
        // If we have already computed this subproblem, return the stored result
        if (memo[i][j] != -1) return memo[i][j];
        
        // Recursively find the maximum path sum by moving up or left
        int fromTop = helper(grid, i - 1, j, memo);
        int fromLeft = helper(grid, i, j - 1, memo);
        
        // Take the maximum of the two possible moves and add the current cell's value
        memo[i][j] = grid[i][j] + min(fromTop, fromLeft);
        
        return memo[i][j];  // Return the computed result
    }
};
